
ROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000228  00800100  00000a40  00000ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a40  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d0c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bd5  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d3  00000000  00000000  000019c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000912  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  00002ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000408  00000000  00000000  00002d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003aa  00000000  00000000  000031a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000354a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <main>
  8e:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <mul2>:



//#define mul2(a) ((a) & 0x80) ? (((a)<<1)^0x1b) : ((a)<<1)

inline uint8_t mul2(register uint8_t a) {
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	return (a&0x80)?((a<<1)^0x1b):(a<<1);
  9e:	98 2f       	mov	r25, r24
  a0:	99 23       	and	r25, r25
  a2:	44 f4       	brge	.+16     	; 0xb4 <mul2+0x1e>
  a4:	88 2f       	mov	r24, r24
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	98 2f       	mov	r25, r24
  ae:	8b e1       	ldi	r24, 0x1B	; 27
  b0:	89 27       	eor	r24, r25
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <mul2+0x20>
  b4:	88 0f       	add	r24, r24
}
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <mul>:
uint8_t mul(uint8_t bc)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	1f 92       	push	r1
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	89 83       	std	Y+1, r24	; 0x01
	return bc*2;
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	88 0f       	add	r24, r24
}
  cc:	0f 90       	pop	r0
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <inv_shift_rows>:

void inv_shift_rows(register uint8_t *state) {
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
   register uint8_t temp,x;
    // row1
	
    temp        = *(state+13);
  e0:	fc 01       	movw	r30, r24
  e2:	05 85       	ldd	r16, Z+13	; 0x0d
	for(x=13;x>3;x-=4)
  e4:	1d e0       	ldi	r17, 0x0D	; 13
  e6:	0f c0       	rjmp	.+30     	; 0x106 <inv_shift_rows+0x32>
	{*(state+x) = *(state+x-4);
  e8:	21 2f       	mov	r18, r17
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	28 0f       	add	r18, r24
  ee:	39 1f       	adc	r19, r25
  f0:	41 2f       	mov	r20, r17
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	44 50       	subi	r20, 0x04	; 4
  f6:	51 09       	sbc	r21, r1
  f8:	48 0f       	add	r20, r24
  fa:	59 1f       	adc	r21, r25
  fc:	fa 01       	movw	r30, r20
  fe:	40 81       	ld	r20, Z
 100:	f9 01       	movw	r30, r18
 102:	40 83       	st	Z, r20
void inv_shift_rows(register uint8_t *state) {
   register uint8_t temp,x;
    // row1
	
    temp        = *(state+13);
	for(x=13;x>3;x-=4)
 104:	14 50       	subi	r17, 0x04	; 4
 106:	14 30       	cpi	r17, 0x04	; 4
 108:	78 f7       	brcc	.-34     	; 0xe8 <inv_shift_rows+0x14>
	{*(state+x) = *(state+x-4);
	}
   
    *(state+1)  = temp;
 10a:	9c 01       	movw	r18, r24
 10c:	2f 5f       	subi	r18, 0xFF	; 255
 10e:	3f 4f       	sbci	r19, 0xFF	; 255
 110:	f9 01       	movw	r30, r18
 112:	00 83       	st	Z, r16
    // row2
    temp        = *(state+14);
 114:	fc 01       	movw	r30, r24
 116:	06 85       	ldd	r16, Z+14	; 0x0e
    *(state+14) = *(state+6);
 118:	9c 01       	movw	r18, r24
 11a:	22 5f       	subi	r18, 0xF2	; 242
 11c:	3f 4f       	sbci	r19, 0xFF	; 255
 11e:	fc 01       	movw	r30, r24
 120:	46 81       	ldd	r20, Z+6	; 0x06
 122:	f9 01       	movw	r30, r18
 124:	40 83       	st	Z, r20
    *(state+6)  = temp;
 126:	9c 01       	movw	r18, r24
 128:	2a 5f       	subi	r18, 0xFA	; 250
 12a:	3f 4f       	sbci	r19, 0xFF	; 255
 12c:	f9 01       	movw	r30, r18
 12e:	00 83       	st	Z, r16
    temp        = *(state+10);
 130:	fc 01       	movw	r30, r24
 132:	02 85       	ldd	r16, Z+10	; 0x0a
    *(state+10) = *(state+2);
 134:	9c 01       	movw	r18, r24
 136:	26 5f       	subi	r18, 0xF6	; 246
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	fc 01       	movw	r30, r24
 13c:	42 81       	ldd	r20, Z+2	; 0x02
 13e:	f9 01       	movw	r30, r18
 140:	40 83       	st	Z, r20
    *(state+2)  = temp;
 142:	9c 01       	movw	r18, r24
 144:	2e 5f       	subi	r18, 0xFE	; 254
 146:	3f 4f       	sbci	r19, 0xFF	; 255
 148:	f9 01       	movw	r30, r18
 14a:	00 83       	st	Z, r16
    // row3
    temp        = *(state+3);
 14c:	fc 01       	movw	r30, r24
 14e:	03 81       	ldd	r16, Z+3	; 0x03
	for(x=3;x<15;x+=4)
 150:	13 e0       	ldi	r17, 0x03	; 3
 152:	0f c0       	rjmp	.+30     	; 0x172 <inv_shift_rows+0x9e>
	{
		*(state+x)  = *(state+x+4);
 154:	21 2f       	mov	r18, r17
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	28 0f       	add	r18, r24
 15a:	39 1f       	adc	r19, r25
 15c:	41 2f       	mov	r20, r17
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	4c 5f       	subi	r20, 0xFC	; 252
 162:	5f 4f       	sbci	r21, 0xFF	; 255
 164:	48 0f       	add	r20, r24
 166:	59 1f       	adc	r21, r25
 168:	fa 01       	movw	r30, r20
 16a:	40 81       	ld	r20, Z
 16c:	f9 01       	movw	r30, r18
 16e:	40 83       	st	Z, r20
    temp        = *(state+10);
    *(state+10) = *(state+2);
    *(state+2)  = temp;
    // row3
    temp        = *(state+3);
	for(x=3;x<15;x+=4)
 170:	1c 5f       	subi	r17, 0xFC	; 252
 172:	1f 30       	cpi	r17, 0x0F	; 15
 174:	78 f3       	brcs	.-34     	; 0x154 <inv_shift_rows+0x80>
	{
		*(state+x)  = *(state+x+4);
	}
    
    *(state+15) = temp;
 176:	0f 96       	adiw	r24, 0x0f	; 15
 178:	fc 01       	movw	r30, r24
 17a:	00 83       	st	Z, r16
	
}
 17c:	00 00       	nop
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	08 95       	ret

00000188 <aes_decrypt_128>:
void aes_decrypt_128(register uint8_t *roundkeys, register uint8_t *ciphertext,register uint8_t *plaintext) {
 188:	6f 92       	push	r6
 18a:	7f 92       	push	r7
 18c:	8f 92       	push	r8
 18e:	9f 92       	push	r9
 190:	af 92       	push	r10
 192:	bf 92       	push	r11
 194:	cf 92       	push	r12
 196:	df 92       	push	r13
 198:	ef 92       	push	r14
 19a:	ff 92       	push	r15
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
 1a8:	60 97       	sbiw	r28, 0x10	; 16
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
 1b4:	6c 01       	movw	r12, r24
 1b6:	7a 01       	movw	r14, r20

    uint8_t tmp[16];
    
    register uint8_t i, j,t,u,v;

    roundkeys += 160;
 1b8:	80 ea       	ldi	r24, 0xA0	; 160
 1ba:	c8 0e       	add	r12, r24
 1bc:	d1 1c       	adc	r13, r1

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 1be:	10 e0       	ldi	r17, 0x00	; 0
 1c0:	14 c0       	rjmp	.+40     	; 0x1ea <aes_decrypt_128+0x62>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
 1c2:	81 2f       	mov	r24, r17
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	8e 0d       	add	r24, r14
 1c8:	9f 1d       	adc	r25, r15
 1ca:	21 2f       	mov	r18, r17
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	26 0f       	add	r18, r22
 1d0:	37 1f       	adc	r19, r23
 1d2:	f9 01       	movw	r30, r18
 1d4:	40 81       	ld	r20, Z
 1d6:	21 2f       	mov	r18, r17
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	2c 0d       	add	r18, r12
 1dc:	3d 1d       	adc	r19, r13
 1de:	f9 01       	movw	r30, r18
 1e0:	20 81       	ld	r18, Z
 1e2:	24 27       	eor	r18, r20
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 83       	st	Z, r18
    register uint8_t i, j,t,u,v;

    roundkeys += 160;

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 1e8:	1f 5f       	subi	r17, 0xFF	; 255
 1ea:	10 31       	cpi	r17, 0x10	; 16
 1ec:	50 f3       	brcs	.-44     	; 0x1c2 <aes_decrypt_128+0x3a>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
 1ee:	f0 e1       	ldi	r31, 0x10	; 16
 1f0:	cf 1a       	sub	r12, r31
 1f2:	d1 08       	sbc	r13, r1
    inv_shift_rows(plaintext);
 1f4:	c7 01       	movw	r24, r14
 1f6:	0e 94 6a 00 	call	0xd4	; 0xd4 <inv_shift_rows>
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 1fa:	10 e0       	ldi	r17, 0x00	; 0
 1fc:	13 c0       	rjmp	.+38     	; 0x224 <aes_decrypt_128+0x9c>
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
 1fe:	81 2f       	mov	r24, r17
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	8e 0d       	add	r24, r14
 204:	9f 1d       	adc	r25, r15
 206:	21 2f       	mov	r18, r17
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	2e 0d       	add	r18, r14
 20c:	3f 1d       	adc	r19, r15
 20e:	f9 01       	movw	r30, r18
 210:	20 81       	ld	r18, Z
 212:	22 2f       	mov	r18, r18
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	20 50       	subi	r18, 0x00	; 0
 218:	3f 4f       	sbci	r19, 0xFF	; 255
 21a:	f9 01       	movw	r30, r18
 21c:	20 81       	ld	r18, Z
 21e:	fc 01       	movw	r30, r24
 220:	20 83       	st	Z, r18
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 222:	1f 5f       	subi	r17, 0xFF	; 255
 224:	10 31       	cpi	r17, 0x10	; 16
 226:	58 f3       	brcs	.-42     	; 0x1fe <aes_decrypt_128+0x76>
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
 228:	aa 24       	eor	r10, r10
 22a:	a3 94       	inc	r10
 22c:	37 c1       	rjmp	.+622    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
        
        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 22e:	10 e0       	ldi	r17, 0x00	; 0
 230:	17 c0       	rjmp	.+46     	; 0x260 <aes_decrypt_128+0xd8>
            *(tmp+i) = *(plaintext+i) ^ *(roundkeys+i);
 232:	81 2f       	mov	r24, r17
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	9e 01       	movw	r18, r28
 238:	2f 5f       	subi	r18, 0xFF	; 255
 23a:	3f 4f       	sbci	r19, 0xFF	; 255
 23c:	82 0f       	add	r24, r18
 23e:	93 1f       	adc	r25, r19
 240:	21 2f       	mov	r18, r17
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	2e 0d       	add	r18, r14
 246:	3f 1d       	adc	r19, r15
 248:	f9 01       	movw	r30, r18
 24a:	40 81       	ld	r20, Z
 24c:	21 2f       	mov	r18, r17
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	2c 0d       	add	r18, r12
 252:	3d 1d       	adc	r19, r13
 254:	f9 01       	movw	r30, r18
 256:	20 81       	ld	r18, Z
 258:	24 27       	eor	r18, r20
 25a:	fc 01       	movw	r30, r24
 25c:	20 83       	st	Z, r18
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
        
        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 25e:	1f 5f       	subi	r17, 0xFF	; 255
 260:	10 31       	cpi	r17, 0x10	; 16
 262:	38 f3       	brcs	.-50     	; 0x232 <aes_decrypt_128+0xaa>
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
 264:	10 e0       	ldi	r17, 0x00	; 0
 266:	f9 c0       	rjmp	.+498    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
 268:	81 2f       	mov	r24, r17
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	9e 01       	movw	r18, r28
 26e:	2f 5f       	subi	r18, 0xFF	; 255
 270:	3f 4f       	sbci	r19, 0xFF	; 255
 272:	82 0f       	add	r24, r18
 274:	93 1f       	adc	r25, r19
 276:	fc 01       	movw	r30, r24
 278:	40 81       	ld	r20, Z
 27a:	81 2f       	mov	r24, r17
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	9e 01       	movw	r18, r28
 282:	2f 5f       	subi	r18, 0xFF	; 255
 284:	3f 4f       	sbci	r19, 0xFF	; 255
 286:	82 0f       	add	r24, r18
 288:	93 1f       	adc	r25, r19
 28a:	fc 01       	movw	r30, r24
 28c:	80 81       	ld	r24, Z
 28e:	48 27       	eor	r20, r24
 290:	81 2f       	mov	r24, r17
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 96       	adiw	r24, 0x02	; 2
 296:	9e 01       	movw	r18, r28
 298:	2f 5f       	subi	r18, 0xFF	; 255
 29a:	3f 4f       	sbci	r19, 0xFF	; 255
 29c:	82 0f       	add	r24, r18
 29e:	93 1f       	adc	r25, r19
 2a0:	fc 01       	movw	r30, r24
 2a2:	80 81       	ld	r24, Z
 2a4:	48 27       	eor	r20, r24
 2a6:	81 2f       	mov	r24, r17
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	03 96       	adiw	r24, 0x03	; 3
 2ac:	9e 01       	movw	r18, r28
 2ae:	2f 5f       	subi	r18, 0xFF	; 255
 2b0:	3f 4f       	sbci	r19, 0xFF	; 255
 2b2:	82 0f       	add	r24, r18
 2b4:	93 1f       	adc	r25, r19
 2b6:	fc 01       	movw	r30, r24
 2b8:	80 81       	ld	r24, Z
 2ba:	b4 2e       	mov	r11, r20
 2bc:	b8 26       	eor	r11, r24
			register uint8_t z = 0,x;
 2be:	71 2c       	mov	r7, r1
			
			while(z<3)
 2c0:	2f c0       	rjmp	.+94     	; 0x320 <aes_decrypt_128+0x198>
			{
				x=i+z;
 2c2:	01 2f       	mov	r16, r17
 2c4:	07 0d       	add	r16, r7
				plaintext[x]   = t ^ tmp[x]   ^ mul2(tmp[x]   ^ tmp[x+1]);
 2c6:	80 2f       	mov	r24, r16
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	47 01       	movw	r8, r14
 2cc:	88 0e       	add	r8, r24
 2ce:	99 1e       	adc	r9, r25
 2d0:	80 2f       	mov	r24, r16
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	9e 01       	movw	r18, r28
 2d6:	2f 5f       	subi	r18, 0xFF	; 255
 2d8:	3f 4f       	sbci	r19, 0xFF	; 255
 2da:	82 0f       	add	r24, r18
 2dc:	93 1f       	adc	r25, r19
 2de:	fc 01       	movw	r30, r24
 2e0:	80 81       	ld	r24, Z
 2e2:	68 2e       	mov	r6, r24
 2e4:	6b 24       	eor	r6, r11
 2e6:	80 2f       	mov	r24, r16
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	9e 01       	movw	r18, r28
 2ec:	2f 5f       	subi	r18, 0xFF	; 255
 2ee:	3f 4f       	sbci	r19, 0xFF	; 255
 2f0:	82 0f       	add	r24, r18
 2f2:	93 1f       	adc	r25, r19
 2f4:	fc 01       	movw	r30, r24
 2f6:	40 81       	ld	r20, Z
 2f8:	80 2f       	mov	r24, r16
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	9e 01       	movw	r18, r28
 300:	2f 5f       	subi	r18, 0xFF	; 255
 302:	3f 4f       	sbci	r19, 0xFF	; 255
 304:	82 0f       	add	r24, r18
 306:	93 1f       	adc	r25, r19
 308:	fc 01       	movw	r30, r24
 30a:	80 81       	ld	r24, Z
 30c:	84 27       	eor	r24, r20
 30e:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 312:	86 25       	eor	r24, r6
 314:	f4 01       	movw	r30, r8
 316:	80 83       	st	Z, r24
				z++;
 318:	87 2d       	mov	r24, r7
 31a:	77 24       	eor	r7, r7
 31c:	73 94       	inc	r7
 31e:	78 0e       	add	r7, r24
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
			register uint8_t z = 0,x;
			
			while(z<3)
 320:	f2 e0       	ldi	r31, 0x02	; 2
 322:	f7 15       	cp	r31, r7
 324:	70 f6       	brcc	.-100    	; 0x2c2 <aes_decrypt_128+0x13a>
			{
				x=i+z;
				plaintext[x]   = t ^ tmp[x]   ^ mul2(tmp[x]   ^ tmp[x+1]);
				z++;
			}
            plaintext[i+3] = t ^ tmp[i+3] ^ mul2(tmp[i+3] ^ tmp[i]);
 326:	81 2f       	mov	r24, r17
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	03 96       	adiw	r24, 0x03	; 3
 32c:	47 01       	movw	r8, r14
 32e:	88 0e       	add	r8, r24
 330:	99 1e       	adc	r9, r25
 332:	81 2f       	mov	r24, r17
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	03 96       	adiw	r24, 0x03	; 3
 338:	9e 01       	movw	r18, r28
 33a:	2f 5f       	subi	r18, 0xFF	; 255
 33c:	3f 4f       	sbci	r19, 0xFF	; 255
 33e:	82 0f       	add	r24, r18
 340:	93 1f       	adc	r25, r19
 342:	fc 01       	movw	r30, r24
 344:	80 81       	ld	r24, Z
 346:	08 2f       	mov	r16, r24
 348:	0b 25       	eor	r16, r11
 34a:	81 2f       	mov	r24, r17
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	03 96       	adiw	r24, 0x03	; 3
 350:	9e 01       	movw	r18, r28
 352:	2f 5f       	subi	r18, 0xFF	; 255
 354:	3f 4f       	sbci	r19, 0xFF	; 255
 356:	82 0f       	add	r24, r18
 358:	93 1f       	adc	r25, r19
 35a:	fc 01       	movw	r30, r24
 35c:	40 81       	ld	r20, Z
 35e:	81 2f       	mov	r24, r17
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	9e 01       	movw	r18, r28
 364:	2f 5f       	subi	r18, 0xFF	; 255
 366:	3f 4f       	sbci	r19, 0xFF	; 255
 368:	82 0f       	add	r24, r18
 36a:	93 1f       	adc	r25, r19
 36c:	fc 01       	movw	r30, r24
 36e:	80 81       	ld	r24, Z
 370:	84 27       	eor	r24, r20
 372:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 376:	80 27       	eor	r24, r16
 378:	f4 01       	movw	r30, r8
 37a:	80 83       	st	Z, r24
            u = mul2(mul2(tmp[i]   ^ tmp[i+2]));
 37c:	81 2f       	mov	r24, r17
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	9e 01       	movw	r18, r28
 382:	2f 5f       	subi	r18, 0xFF	; 255
 384:	3f 4f       	sbci	r19, 0xFF	; 255
 386:	82 0f       	add	r24, r18
 388:	93 1f       	adc	r25, r19
 38a:	fc 01       	movw	r30, r24
 38c:	40 81       	ld	r20, Z
 38e:	81 2f       	mov	r24, r17
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 96       	adiw	r24, 0x02	; 2
 394:	9e 01       	movw	r18, r28
 396:	2f 5f       	subi	r18, 0xFF	; 255
 398:	3f 4f       	sbci	r19, 0xFF	; 255
 39a:	82 0f       	add	r24, r18
 39c:	93 1f       	adc	r25, r19
 39e:	fc 01       	movw	r30, r24
 3a0:	80 81       	ld	r24, Z
 3a2:	84 27       	eor	r24, r20
 3a4:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 3a8:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 3ac:	98 2e       	mov	r9, r24
            v = mul2(mul2(tmp[i+1] ^ tmp[i+3]));
 3ae:	81 2f       	mov	r24, r17
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	9e 01       	movw	r18, r28
 3b6:	2f 5f       	subi	r18, 0xFF	; 255
 3b8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ba:	82 0f       	add	r24, r18
 3bc:	93 1f       	adc	r25, r19
 3be:	fc 01       	movw	r30, r24
 3c0:	40 81       	ld	r20, Z
 3c2:	81 2f       	mov	r24, r17
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	03 96       	adiw	r24, 0x03	; 3
 3c8:	9e 01       	movw	r18, r28
 3ca:	2f 5f       	subi	r18, 0xFF	; 255
 3cc:	3f 4f       	sbci	r19, 0xFF	; 255
 3ce:	82 0f       	add	r24, r18
 3d0:	93 1f       	adc	r25, r19
 3d2:	fc 01       	movw	r30, r24
 3d4:	80 81       	ld	r24, Z
 3d6:	84 27       	eor	r24, r20
 3d8:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 3dc:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 3e0:	88 2e       	mov	r8, r24
            t = mul2(u ^ v);
 3e2:	89 2d       	mov	r24, r9
 3e4:	88 25       	eor	r24, r8
 3e6:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 3ea:	b8 2e       	mov	r11, r24
			for(x=0;x<4;x+=2)
 3ec:	00 e0       	ldi	r16, 0x00	; 0
 3ee:	32 c0       	rjmp	.+100    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			{ plaintext[i+x]   ^= (t ^ u);
 3f0:	21 2f       	mov	r18, r17
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	80 2f       	mov	r24, r16
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	82 0f       	add	r24, r18
 3fa:	93 1f       	adc	r25, r19
 3fc:	8e 0d       	add	r24, r14
 3fe:	9f 1d       	adc	r25, r15
 400:	41 2f       	mov	r20, r17
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	20 2f       	mov	r18, r16
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	24 0f       	add	r18, r20
 40a:	35 1f       	adc	r19, r21
 40c:	2e 0d       	add	r18, r14
 40e:	3f 1d       	adc	r19, r15
 410:	f9 01       	movw	r30, r18
 412:	30 81       	ld	r19, Z
 414:	2b 2d       	mov	r18, r11
 416:	29 25       	eor	r18, r9
 418:	23 27       	eor	r18, r19
 41a:	fc 01       	movw	r30, r24
 41c:	20 83       	st	Z, r18
             plaintext[i+x+1] ^= (t ^ v);
 41e:	21 2f       	mov	r18, r17
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	80 2f       	mov	r24, r16
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	82 0f       	add	r24, r18
 428:	93 1f       	adc	r25, r19
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	8e 0d       	add	r24, r14
 42e:	9f 1d       	adc	r25, r15
 430:	41 2f       	mov	r20, r17
 432:	50 e0       	ldi	r21, 0x00	; 0
 434:	20 2f       	mov	r18, r16
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	24 0f       	add	r18, r20
 43a:	35 1f       	adc	r19, r21
 43c:	2f 5f       	subi	r18, 0xFF	; 255
 43e:	3f 4f       	sbci	r19, 0xFF	; 255
 440:	2e 0d       	add	r18, r14
 442:	3f 1d       	adc	r19, r15
 444:	f9 01       	movw	r30, r18
 446:	30 81       	ld	r19, Z
 448:	2b 2d       	mov	r18, r11
 44a:	28 25       	eor	r18, r8
 44c:	23 27       	eor	r18, r19
 44e:	fc 01       	movw	r30, r24
 450:	20 83       	st	Z, r18
			}
            plaintext[i+3] = t ^ tmp[i+3] ^ mul2(tmp[i+3] ^ tmp[i]);
            u = mul2(mul2(tmp[i]   ^ tmp[i+2]));
            v = mul2(mul2(tmp[i+1] ^ tmp[i+3]));
            t = mul2(u ^ v);
			for(x=0;x<4;x+=2)
 452:	0e 5f       	subi	r16, 0xFE	; 254
 454:	04 30       	cpi	r16, 0x04	; 4
 456:	60 f2       	brcs	.-104    	; 0x3f0 <aes_decrypt_128+0x268>
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
 458:	1c 5f       	subi	r17, 0xFC	; 252
 45a:	10 31       	cpi	r17, 0x10	; 16
 45c:	08 f4       	brcc	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45e:	04 cf       	rjmp	.-504    	; 0x268 <aes_decrypt_128+0xe0>
			}
          
        }
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
 460:	c7 01       	movw	r24, r14
 462:	0e 94 6a 00 	call	0xd4	; 0xd4 <inv_shift_rows>
        
        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 466:	10 e0       	ldi	r17, 0x00	; 0
 468:	13 c0       	rjmp	.+38     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
            *(plaintext+i) = INV_SBOX[*(plaintext+i)];
 46a:	81 2f       	mov	r24, r17
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	8e 0d       	add	r24, r14
 470:	9f 1d       	adc	r25, r15
 472:	21 2f       	mov	r18, r17
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	2e 0d       	add	r18, r14
 478:	3f 1d       	adc	r19, r15
 47a:	f9 01       	movw	r30, r18
 47c:	20 81       	ld	r18, Z
 47e:	22 2f       	mov	r18, r18
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	20 50       	subi	r18, 0x00	; 0
 484:	3f 4f       	sbci	r19, 0xFF	; 255
 486:	f9 01       	movw	r30, r18
 488:	20 81       	ld	r18, Z
 48a:	fc 01       	movw	r30, r24
 48c:	20 83       	st	Z, r18
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
        
        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 48e:	1f 5f       	subi	r17, 0xFF	; 255
 490:	10 31       	cpi	r17, 0x10	; 16
 492:	58 f3       	brcs	.-42     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
            *(plaintext+i) = INV_SBOX[*(plaintext+i)];
        }

        roundkeys -= 16;
 494:	f0 e1       	ldi	r31, 0x10	; 16
 496:	cf 1a       	sub	r12, r31
 498:	d1 08       	sbc	r13, r1
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
 49a:	a3 94       	inc	r10
 49c:	89 e0       	ldi	r24, 0x09	; 9
 49e:	8a 15       	cp	r24, r10
 4a0:	08 f0       	brcs	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a2:	c5 ce       	rjmp	.-630    	; 0x22e <aes_decrypt_128+0xa6>
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 4a4:	10 e0       	ldi	r17, 0x00	; 0
 4a6:	14 c0       	rjmp	.+40     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
        *(plaintext+i) ^= *(roundkeys+i);
 4a8:	81 2f       	mov	r24, r17
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	8e 0d       	add	r24, r14
 4ae:	9f 1d       	adc	r25, r15
 4b0:	21 2f       	mov	r18, r17
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	2e 0d       	add	r18, r14
 4b6:	3f 1d       	adc	r19, r15
 4b8:	f9 01       	movw	r30, r18
 4ba:	40 81       	ld	r20, Z
 4bc:	21 2f       	mov	r18, r17
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	2c 0d       	add	r18, r12
 4c2:	3d 1d       	adc	r19, r13
 4c4:	f9 01       	movw	r30, r18
 4c6:	20 81       	ld	r18, Z
 4c8:	24 27       	eor	r18, r20
 4ca:	fc 01       	movw	r30, r24
 4cc:	20 83       	st	Z, r18
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 4ce:	1f 5f       	subi	r17, 0xFF	; 255
 4d0:	10 31       	cpi	r17, 0x10	; 16
 4d2:	50 f3       	brcs	.-44     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
        *(plaintext+i) ^= *(roundkeys+i);
    }

 4d4:	00 00       	nop
 4d6:	60 96       	adiw	r28, 0x10	; 16
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	f8 94       	cli
 4dc:	de bf       	out	0x3e, r29	; 62
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	cd bf       	out	0x3d, r28	; 61
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	1f 91       	pop	r17
 4e8:	0f 91       	pop	r16
 4ea:	ff 90       	pop	r15
 4ec:	ef 90       	pop	r14
 4ee:	df 90       	pop	r13
 4f0:	cf 90       	pop	r12
 4f2:	bf 90       	pop	r11
 4f4:	af 90       	pop	r10
 4f6:	9f 90       	pop	r9
 4f8:	8f 90       	pop	r8
 4fa:	7f 90       	pop	r7
 4fc:	6f 90       	pop	r6
 4fe:	08 95       	ret

00000500 <shift_rows>:
 *  Row0: s0  s4  s8  s12   <<< 0 byte
 *  Row1: s1  s5  s9  s13   <<< 1 byte
 *  Row2: s2  s6  s10 s14   <<< 2 bytes
 *  Row3: s3  s7  s11 s15   <<< 3 bytes
 */
void shift_rows(register uint8_t *state) {
 500:	0f 93       	push	r16
 502:	1f 93       	push	r17
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	cd b7       	in	r28, 0x3d	; 61
 50a:	de b7       	in	r29, 0x3e	; 62
   register uint8_t temp,m;
    // row1
	temp        = *(state+1);
 50c:	fc 01       	movw	r30, r24
 50e:	01 81       	ldd	r16, Z+1	; 0x01
	for(m=1;m<13;m+=4)
 510:	11 e0       	ldi	r17, 0x01	; 1
 512:	0f c0       	rjmp	.+30     	; 0x532 <shift_rows+0x32>
	{
		*(state+m)  = *(state+m+4);
 514:	21 2f       	mov	r18, r17
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	28 0f       	add	r18, r24
 51a:	39 1f       	adc	r19, r25
 51c:	41 2f       	mov	r20, r17
 51e:	50 e0       	ldi	r21, 0x00	; 0
 520:	4c 5f       	subi	r20, 0xFC	; 252
 522:	5f 4f       	sbci	r21, 0xFF	; 255
 524:	48 0f       	add	r20, r24
 526:	59 1f       	adc	r21, r25
 528:	fa 01       	movw	r30, r20
 52a:	40 81       	ld	r20, Z
 52c:	f9 01       	movw	r30, r18
 52e:	40 83       	st	Z, r20
 */
void shift_rows(register uint8_t *state) {
   register uint8_t temp,m;
    // row1
	temp        = *(state+1);
	for(m=1;m<13;m+=4)
 530:	1c 5f       	subi	r17, 0xFC	; 252
 532:	1d 30       	cpi	r17, 0x0D	; 13
 534:	78 f3       	brcs	.-34     	; 0x514 <shift_rows+0x14>
	{
		*(state+m)  = *(state+m+4);
	}
	
    *(state+13) = temp;
 536:	9c 01       	movw	r18, r24
 538:	23 5f       	subi	r18, 0xF3	; 243
 53a:	3f 4f       	sbci	r19, 0xFF	; 255
 53c:	f9 01       	movw	r30, r18
 53e:	00 83       	st	Z, r16
    // row2
    temp        = *(state+2);
 540:	fc 01       	movw	r30, r24
 542:	02 81       	ldd	r16, Z+2	; 0x02
    *(state+2)  = *(state+10);
 544:	9c 01       	movw	r18, r24
 546:	2e 5f       	subi	r18, 0xFE	; 254
 548:	3f 4f       	sbci	r19, 0xFF	; 255
 54a:	fc 01       	movw	r30, r24
 54c:	42 85       	ldd	r20, Z+10	; 0x0a
 54e:	f9 01       	movw	r30, r18
 550:	40 83       	st	Z, r20
    *(state+10) = temp;
 552:	9c 01       	movw	r18, r24
 554:	26 5f       	subi	r18, 0xF6	; 246
 556:	3f 4f       	sbci	r19, 0xFF	; 255
 558:	f9 01       	movw	r30, r18
 55a:	00 83       	st	Z, r16
    temp        = *(state+6);
 55c:	fc 01       	movw	r30, r24
 55e:	06 81       	ldd	r16, Z+6	; 0x06
    *(state+6)  = *(state+14);
 560:	9c 01       	movw	r18, r24
 562:	2a 5f       	subi	r18, 0xFA	; 250
 564:	3f 4f       	sbci	r19, 0xFF	; 255
 566:	fc 01       	movw	r30, r24
 568:	46 85       	ldd	r20, Z+14	; 0x0e
 56a:	f9 01       	movw	r30, r18
 56c:	40 83       	st	Z, r20
    *(state+14) = temp;
 56e:	9c 01       	movw	r18, r24
 570:	22 5f       	subi	r18, 0xF2	; 242
 572:	3f 4f       	sbci	r19, 0xFF	; 255
 574:	f9 01       	movw	r30, r18
 576:	00 83       	st	Z, r16
    // row3
    temp        = *(state+15);
 578:	fc 01       	movw	r30, r24
 57a:	07 85       	ldd	r16, Z+15	; 0x0f
	for(m=15;m>3;m-=4)
 57c:	1f e0       	ldi	r17, 0x0F	; 15
 57e:	0f c0       	rjmp	.+30     	; 0x59e <shift_rows+0x9e>
	{*(state+m) = *(state+m-4);
 580:	21 2f       	mov	r18, r17
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	28 0f       	add	r18, r24
 586:	39 1f       	adc	r19, r25
 588:	41 2f       	mov	r20, r17
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	44 50       	subi	r20, 0x04	; 4
 58e:	51 09       	sbc	r21, r1
 590:	48 0f       	add	r20, r24
 592:	59 1f       	adc	r21, r25
 594:	fa 01       	movw	r30, r20
 596:	40 81       	ld	r20, Z
 598:	f9 01       	movw	r30, r18
 59a:	40 83       	st	Z, r20
    temp        = *(state+6);
    *(state+6)  = *(state+14);
    *(state+14) = temp;
    // row3
    temp        = *(state+15);
	for(m=15;m>3;m-=4)
 59c:	14 50       	subi	r17, 0x04	; 4
 59e:	14 30       	cpi	r17, 0x04	; 4
 5a0:	78 f7       	brcc	.-34     	; 0x580 <shift_rows+0x80>
	{*(state+m) = *(state+m-4);
	}
   
    *(state+3)  = temp;
 5a2:	03 96       	adiw	r24, 0x03	; 3
 5a4:	fc 01       	movw	r30, r24
 5a6:	00 83       	st	Z, r16
}
 5a8:	00 00       	nop
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	1f 91       	pop	r17
 5b0:	0f 91       	pop	r16
 5b2:	08 95       	ret

000005b4 <aes_encrypt_128>:

void aes_encrypt_128(register uint8_t *roundkeys,register uint8_t *plaintext, register uint8_t *ciphertext) {
 5b4:	9f 92       	push	r9
 5b6:	af 92       	push	r10
 5b8:	bf 92       	push	r11
 5ba:	cf 92       	push	r12
 5bc:	df 92       	push	r13
 5be:	ef 92       	push	r14
 5c0:	ff 92       	push	r15
 5c2:	0f 93       	push	r16
 5c4:	1f 93       	push	r17
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	cd b7       	in	r28, 0x3d	; 61
 5cc:	de b7       	in	r29, 0x3e	; 62
 5ce:	61 97       	sbiw	r28, 0x11	; 17
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	f8 94       	cli
 5d4:	de bf       	out	0x3e, r29	; 62
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	cd bf       	out	0x3d, r28	; 61
 5da:	6c 01       	movw	r12, r24
 5dc:	7a 01       	movw	r14, r20

    uint8_t tmp[16], t;
    register uint8_t i, j,x;

    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 5de:	10 e0       	ldi	r17, 0x00	; 0
 5e0:	16 c0       	rjmp	.+44     	; 0x60e <aes_encrypt_128+0x5a>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
 5e2:	81 2f       	mov	r24, r17
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	97 01       	movw	r18, r14
 5e8:	28 0f       	add	r18, r24
 5ea:	39 1f       	adc	r19, r25
 5ec:	81 2f       	mov	r24, r17
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	86 0f       	add	r24, r22
 5f2:	97 1f       	adc	r25, r23
 5f4:	fc 01       	movw	r30, r24
 5f6:	40 81       	ld	r20, Z
 5f8:	c6 01       	movw	r24, r12
 5fa:	6c 01       	movw	r12, r24
 5fc:	ff ef       	ldi	r31, 0xFF	; 255
 5fe:	cf 1a       	sub	r12, r31
 600:	df 0a       	sbc	r13, r31
 602:	fc 01       	movw	r30, r24
 604:	80 81       	ld	r24, Z
 606:	84 27       	eor	r24, r20
 608:	f9 01       	movw	r30, r18
 60a:	80 83       	st	Z, r24

    uint8_t tmp[16], t;
    register uint8_t i, j,x;

    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 60c:	1f 5f       	subi	r17, 0xFF	; 255
 60e:	10 31       	cpi	r17, 0x10	; 16
 610:	40 f3       	brcs	.-48     	; 0x5e2 <aes_encrypt_128+0x2e>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {
 612:	99 24       	eor	r9, r9
 614:	93 94       	inc	r9
 616:	db c0       	rjmp	.+438    	; 0x7ce <aes_encrypt_128+0x21a>

        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 618:	10 e0       	ldi	r17, 0x00	; 0
 61a:	16 c0       	rjmp	.+44     	; 0x648 <aes_encrypt_128+0x94>
            *(tmp+i) = SBOX[*(ciphertext+i)];
 61c:	81 2f       	mov	r24, r17
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	9e 01       	movw	r18, r28
 622:	2e 5f       	subi	r18, 0xFE	; 254
 624:	3f 4f       	sbci	r19, 0xFF	; 255
 626:	82 0f       	add	r24, r18
 628:	93 1f       	adc	r25, r19
 62a:	21 2f       	mov	r18, r17
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	2e 0d       	add	r18, r14
 630:	3f 1d       	adc	r19, r15
 632:	f9 01       	movw	r30, r18
 634:	20 81       	ld	r18, Z
 636:	22 2f       	mov	r18, r18
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	20 50       	subi	r18, 0x00	; 0
 63c:	3e 4f       	sbci	r19, 0xFE	; 254
 63e:	f9 01       	movw	r30, r18
 640:	20 81       	ld	r18, Z
 642:	fc 01       	movw	r30, r24
 644:	20 83       	st	Z, r18

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {

        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 646:	1f 5f       	subi	r17, 0xFF	; 255
 648:	10 31       	cpi	r17, 0x10	; 16
 64a:	40 f3       	brcs	.-48     	; 0x61c <aes_encrypt_128+0x68>
            *(tmp+i) = SBOX[*(ciphertext+i)];
        }
        shift_rows(tmp);
 64c:	ce 01       	movw	r24, r28
 64e:	02 96       	adiw	r24, 0x02	; 2
 650:	0e 94 80 02 	call	0x500	; 0x500 <shift_rows>
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4){  
 654:	10 e0       	ldi	r17, 0x00	; 0
 656:	9e c0       	rjmp	.+316    	; 0x794 <aes_encrypt_128+0x1e0>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
 658:	81 2f       	mov	r24, r17
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	9e 01       	movw	r18, r28
 65e:	2e 5f       	subi	r18, 0xFE	; 254
 660:	3f 4f       	sbci	r19, 0xFF	; 255
 662:	82 0f       	add	r24, r18
 664:	93 1f       	adc	r25, r19
 666:	fc 01       	movw	r30, r24
 668:	40 81       	ld	r20, Z
 66a:	81 2f       	mov	r24, r17
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	9e 01       	movw	r18, r28
 672:	2e 5f       	subi	r18, 0xFE	; 254
 674:	3f 4f       	sbci	r19, 0xFF	; 255
 676:	82 0f       	add	r24, r18
 678:	93 1f       	adc	r25, r19
 67a:	fc 01       	movw	r30, r24
 67c:	80 81       	ld	r24, Z
 67e:	48 27       	eor	r20, r24
 680:	81 2f       	mov	r24, r17
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	02 96       	adiw	r24, 0x02	; 2
 686:	9e 01       	movw	r18, r28
 688:	2e 5f       	subi	r18, 0xFE	; 254
 68a:	3f 4f       	sbci	r19, 0xFF	; 255
 68c:	82 0f       	add	r24, r18
 68e:	93 1f       	adc	r25, r19
 690:	fc 01       	movw	r30, r24
 692:	80 81       	ld	r24, Z
 694:	48 27       	eor	r20, r24
 696:	81 2f       	mov	r24, r17
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	03 96       	adiw	r24, 0x03	; 3
 69c:	9e 01       	movw	r18, r28
 69e:	2e 5f       	subi	r18, 0xFE	; 254
 6a0:	3f 4f       	sbci	r19, 0xFF	; 255
 6a2:	82 0f       	add	r24, r18
 6a4:	93 1f       	adc	r25, r19
 6a6:	fc 01       	movw	r30, r24
 6a8:	80 81       	ld	r24, Z
 6aa:	84 27       	eor	r24, r20
 6ac:	89 83       	std	Y+1, r24	; 0x01
			for(x=0;x<3;x++)
 6ae:	00 e0       	ldi	r16, 0x00	; 0
 6b0:	40 c0       	rjmp	.+128    	; 0x732 <aes_encrypt_128+0x17e>
			{
				ciphertext[i+x]   = mul2(tmp[i+x]   ^ tmp[i+1+x]) ^ tmp[i+x]   ^ t;
 6b2:	21 2f       	mov	r18, r17
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	80 2f       	mov	r24, r16
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	82 0f       	add	r24, r18
 6bc:	93 1f       	adc	r25, r19
 6be:	57 01       	movw	r10, r14
 6c0:	a8 0e       	add	r10, r24
 6c2:	b9 1e       	adc	r11, r25
 6c4:	21 2f       	mov	r18, r17
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	80 2f       	mov	r24, r16
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	82 0f       	add	r24, r18
 6ce:	93 1f       	adc	r25, r19
 6d0:	9e 01       	movw	r18, r28
 6d2:	2e 5f       	subi	r18, 0xFE	; 254
 6d4:	3f 4f       	sbci	r19, 0xFF	; 255
 6d6:	82 0f       	add	r24, r18
 6d8:	93 1f       	adc	r25, r19
 6da:	fc 01       	movw	r30, r24
 6dc:	40 81       	ld	r20, Z
 6de:	81 2f       	mov	r24, r17
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	9c 01       	movw	r18, r24
 6e4:	2f 5f       	subi	r18, 0xFF	; 255
 6e6:	3f 4f       	sbci	r19, 0xFF	; 255
 6e8:	80 2f       	mov	r24, r16
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	82 0f       	add	r24, r18
 6ee:	93 1f       	adc	r25, r19
 6f0:	9e 01       	movw	r18, r28
 6f2:	2e 5f       	subi	r18, 0xFE	; 254
 6f4:	3f 4f       	sbci	r19, 0xFF	; 255
 6f6:	82 0f       	add	r24, r18
 6f8:	93 1f       	adc	r25, r19
 6fa:	fc 01       	movw	r30, r24
 6fc:	80 81       	ld	r24, Z
 6fe:	84 27       	eor	r24, r20
 700:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 704:	48 2f       	mov	r20, r24
 706:	21 2f       	mov	r18, r17
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	80 2f       	mov	r24, r16
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	82 0f       	add	r24, r18
 710:	93 1f       	adc	r25, r19
 712:	9e 01       	movw	r18, r28
 714:	2e 5f       	subi	r18, 0xFE	; 254
 716:	3f 4f       	sbci	r19, 0xFF	; 255
 718:	82 0f       	add	r24, r18
 71a:	93 1f       	adc	r25, r19
 71c:	fc 01       	movw	r30, r24
 71e:	80 81       	ld	r24, Z
 720:	94 2f       	mov	r25, r20
 722:	98 27       	eor	r25, r24
 724:	89 81       	ldd	r24, Y+1	; 0x01
 726:	89 27       	eor	r24, r25
 728:	f5 01       	movw	r30, r10
 72a:	80 83       	st	Z, r24
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4){  
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
			for(x=0;x<3;x++)
 72c:	80 2f       	mov	r24, r16
 72e:	01 e0       	ldi	r16, 0x01	; 1
 730:	08 0f       	add	r16, r24
 732:	03 30       	cpi	r16, 0x03	; 3
 734:	08 f4       	brcc	.+2      	; 0x738 <aes_encrypt_128+0x184>
 736:	bd cf       	rjmp	.-134    	; 0x6b2 <aes_encrypt_128+0xfe>
			{
				ciphertext[i+x]   = mul2(tmp[i+x]   ^ tmp[i+1+x]) ^ tmp[i+x]   ^ t;
			}

            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
 738:	81 2f       	mov	r24, r17
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	03 96       	adiw	r24, 0x03	; 3
 73e:	57 01       	movw	r10, r14
 740:	a8 0e       	add	r10, r24
 742:	b9 1e       	adc	r11, r25
 744:	81 2f       	mov	r24, r17
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	03 96       	adiw	r24, 0x03	; 3
 74a:	9e 01       	movw	r18, r28
 74c:	2e 5f       	subi	r18, 0xFE	; 254
 74e:	3f 4f       	sbci	r19, 0xFF	; 255
 750:	82 0f       	add	r24, r18
 752:	93 1f       	adc	r25, r19
 754:	fc 01       	movw	r30, r24
 756:	40 81       	ld	r20, Z
 758:	81 2f       	mov	r24, r17
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	9e 01       	movw	r18, r28
 75e:	2e 5f       	subi	r18, 0xFE	; 254
 760:	3f 4f       	sbci	r19, 0xFF	; 255
 762:	82 0f       	add	r24, r18
 764:	93 1f       	adc	r25, r19
 766:	fc 01       	movw	r30, r24
 768:	80 81       	ld	r24, Z
 76a:	84 27       	eor	r24, r20
 76c:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 770:	48 2f       	mov	r20, r24
 772:	81 2f       	mov	r24, r17
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	03 96       	adiw	r24, 0x03	; 3
 778:	9e 01       	movw	r18, r28
 77a:	2e 5f       	subi	r18, 0xFE	; 254
 77c:	3f 4f       	sbci	r19, 0xFF	; 255
 77e:	82 0f       	add	r24, r18
 780:	93 1f       	adc	r25, r19
 782:	fc 01       	movw	r30, r24
 784:	80 81       	ld	r24, Z
 786:	94 2f       	mov	r25, r20
 788:	98 27       	eor	r25, r24
 78a:	89 81       	ldd	r24, Y+1	; 0x01
 78c:	89 27       	eor	r24, r25
 78e:	f5 01       	movw	r30, r10
 790:	80 83       	st	Z, r24
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4){  
 792:	1c 5f       	subi	r17, 0xFC	; 252
 794:	10 31       	cpi	r17, 0x10	; 16
 796:	08 f4       	brcc	.+2      	; 0x79a <aes_encrypt_128+0x1e6>
 798:	5f cf       	rjmp	.-322    	; 0x658 <aes_encrypt_128+0xa4>

            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
        }

        // AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 79a:	10 e0       	ldi	r17, 0x00	; 0
 79c:	15 c0       	rjmp	.+42     	; 0x7c8 <aes_encrypt_128+0x214>
            *(ciphertext+i) ^= *roundkeys++;
 79e:	c6 01       	movw	r24, r12
 7a0:	6c 01       	movw	r12, r24
 7a2:	ff ef       	ldi	r31, 0xFF	; 255
 7a4:	cf 1a       	sub	r12, r31
 7a6:	df 0a       	sbc	r13, r31
 7a8:	fc 01       	movw	r30, r24
 7aa:	40 81       	ld	r20, Z
 7ac:	81 2f       	mov	r24, r17
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	8e 0d       	add	r24, r14
 7b2:	9f 1d       	adc	r25, r15
 7b4:	21 2f       	mov	r18, r17
 7b6:	30 e0       	ldi	r19, 0x00	; 0
 7b8:	2e 0d       	add	r18, r14
 7ba:	3f 1d       	adc	r19, r15
 7bc:	f9 01       	movw	r30, r18
 7be:	20 81       	ld	r18, Z
 7c0:	24 27       	eor	r18, r20
 7c2:	fc 01       	movw	r30, r24
 7c4:	20 83       	st	Z, r18

            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
        }

        // AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 7c6:	1f 5f       	subi	r17, 0xFF	; 255
 7c8:	10 31       	cpi	r17, 0x10	; 16
 7ca:	48 f3       	brcs	.-46     	; 0x79e <aes_encrypt_128+0x1ea>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {
 7cc:	93 94       	inc	r9
 7ce:	f9 e0       	ldi	r31, 0x09	; 9
 7d0:	f9 15       	cp	r31, r9
 7d2:	08 f0       	brcs	.+2      	; 0x7d6 <aes_encrypt_128+0x222>
 7d4:	21 cf       	rjmp	.-446    	; 0x618 <aes_encrypt_128+0x64>
        }

    }
    
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 7d6:	10 e0       	ldi	r17, 0x00	; 0
 7d8:	13 c0       	rjmp	.+38     	; 0x800 <aes_encrypt_128+0x24c>
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
 7da:	81 2f       	mov	r24, r17
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	8e 0d       	add	r24, r14
 7e0:	9f 1d       	adc	r25, r15
 7e2:	21 2f       	mov	r18, r17
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	2e 0d       	add	r18, r14
 7e8:	3f 1d       	adc	r19, r15
 7ea:	f9 01       	movw	r30, r18
 7ec:	20 81       	ld	r18, Z
 7ee:	22 2f       	mov	r18, r18
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	20 50       	subi	r18, 0x00	; 0
 7f4:	3e 4f       	sbci	r19, 0xFE	; 254
 7f6:	f9 01       	movw	r30, r18
 7f8:	20 81       	ld	r18, Z
 7fa:	fc 01       	movw	r30, r24
 7fc:	20 83       	st	Z, r18
        }

    }
    
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 7fe:	1f 5f       	subi	r17, 0xFF	; 255
 800:	10 31       	cpi	r17, 0x10	; 16
 802:	58 f3       	brcs	.-42     	; 0x7da <aes_encrypt_128+0x226>
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
    }
    shift_rows(ciphertext);
 804:	c7 01       	movw	r24, r14
 806:	0e 94 80 02 	call	0x500	; 0x500 <shift_rows>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 80a:	10 e0       	ldi	r17, 0x00	; 0
 80c:	15 c0       	rjmp	.+42     	; 0x838 <aes_encrypt_128+0x284>
        *(ciphertext+i) ^= *roundkeys++;
 80e:	c6 01       	movw	r24, r12
 810:	6c 01       	movw	r12, r24
 812:	ff ef       	ldi	r31, 0xFF	; 255
 814:	cf 1a       	sub	r12, r31
 816:	df 0a       	sbc	r13, r31
 818:	fc 01       	movw	r30, r24
 81a:	40 81       	ld	r20, Z
 81c:	81 2f       	mov	r24, r17
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	8e 0d       	add	r24, r14
 822:	9f 1d       	adc	r25, r15
 824:	21 2f       	mov	r18, r17
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	2e 0d       	add	r18, r14
 82a:	3f 1d       	adc	r19, r15
 82c:	f9 01       	movw	r30, r18
 82e:	20 81       	ld	r18, Z
 830:	24 27       	eor	r18, r20
 832:	fc 01       	movw	r30, r24
 834:	20 83       	st	Z, r18
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
    }
    shift_rows(ciphertext);
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 836:	1f 5f       	subi	r17, 0xFF	; 255
 838:	10 31       	cpi	r17, 0x10	; 16
 83a:	48 f3       	brcs	.-46     	; 0x80e <aes_encrypt_128+0x25a>
        *(ciphertext+i) ^= *roundkeys++;
    }

}
 83c:	00 00       	nop
 83e:	61 96       	adiw	r28, 0x11	; 17
 840:	0f b6       	in	r0, 0x3f	; 63
 842:	f8 94       	cli
 844:	de bf       	out	0x3e, r29	; 62
 846:	0f be       	out	0x3f, r0	; 63
 848:	cd bf       	out	0x3d, r28	; 61
 84a:	df 91       	pop	r29
 84c:	cf 91       	pop	r28
 84e:	1f 91       	pop	r17
 850:	0f 91       	pop	r16
 852:	ff 90       	pop	r15
 854:	ef 90       	pop	r14
 856:	df 90       	pop	r13
 858:	cf 90       	pop	r12
 85a:	bf 90       	pop	r11
 85c:	af 90       	pop	r10
 85e:	9f 90       	pop	r9
 860:	08 95       	ret

00000862 <aes_key_schedule_128>:
#include "Common.h"
/*
 * round constants
 */
static uint8_t RC[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
void aes_key_schedule_128(register uint8_t *key, register uint8_t *roundkeys) {
 862:	cf 92       	push	r12
 864:	df 92       	push	r13
 866:	ef 92       	push	r14
 868:	ff 92       	push	r15
 86a:	0f 93       	push	r16
 86c:	1f 93       	push	r17
 86e:	cf 93       	push	r28
 870:	df 93       	push	r29
 872:	00 d0       	rcall	.+0      	; 0x874 <aes_key_schedule_128+0x12>
 874:	00 d0       	rcall	.+0      	; 0x876 <aes_key_schedule_128+0x14>
 876:	cd b7       	in	r28, 0x3d	; 61
 878:	de b7       	in	r29, 0x3e	; 62
 87a:	fc 01       	movw	r30, r24
 87c:	cb 01       	movw	r24, r22

    uint8_t temp[4];
  
   register  uint8_t i,j=0,*last4bytes,*lastround;
 87e:	f1 2c       	mov	r15, r1

    for (i = 0; i < 16; ++i) {
 880:	e1 2c       	mov	r14, r1
 882:	0b c0       	rjmp	.+22     	; 0x89a <aes_key_schedule_128+0x38>
        *roundkeys++ = *key++;
 884:	9c 01       	movw	r18, r24
 886:	c9 01       	movw	r24, r18
 888:	01 96       	adiw	r24, 0x01	; 1
 88a:	af 01       	movw	r20, r30
 88c:	fa 01       	movw	r30, r20
 88e:	31 96       	adiw	r30, 0x01	; 1
 890:	da 01       	movw	r26, r20
 892:	4c 91       	ld	r20, X
 894:	d9 01       	movw	r26, r18
 896:	4c 93       	st	X, r20

    uint8_t temp[4];
  
   register  uint8_t i,j=0,*last4bytes,*lastround;

    for (i = 0; i < 16; ++i) {
 898:	e3 94       	inc	r14
 89a:	bf e0       	ldi	r27, 0x0F	; 15
 89c:	be 15       	cp	r27, r14
 89e:	90 f7       	brcc	.-28     	; 0x884 <aes_key_schedule_128+0x22>
        *roundkeys++ = *key++;
    }

    last4bytes = roundkeys-4;
 8a0:	8c 01       	movw	r16, r24
 8a2:	04 50       	subi	r16, 0x04	; 4
 8a4:	11 09       	sbc	r17, r1
    for (i = 0; i < AES_ROUNDS; ++i) {
 8a6:	e1 2c       	mov	r14, r1
 8a8:	74 c0       	rjmp	.+232    	; 0x992 <__stack+0x93>
        // k0-k3 for next round
        temp[3] = SBOX[*last4bytes++];
 8aa:	98 01       	movw	r18, r16
 8ac:	89 01       	movw	r16, r18
 8ae:	0f 5f       	subi	r16, 0xFF	; 255
 8b0:	1f 4f       	sbci	r17, 0xFF	; 255
 8b2:	f9 01       	movw	r30, r18
 8b4:	20 81       	ld	r18, Z
 8b6:	22 2f       	mov	r18, r18
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	20 50       	subi	r18, 0x00	; 0
 8bc:	3e 4f       	sbci	r19, 0xFE	; 254
 8be:	d9 01       	movw	r26, r18
 8c0:	2c 91       	ld	r18, X
 8c2:	2c 83       	std	Y+4, r18	; 0x04
		for(j=0;j<3;j++)
 8c4:	f1 2c       	mov	r15, r1
 8c6:	19 c0       	rjmp	.+50     	; 0x8fa <aes_key_schedule_128+0x98>
		{
			temp[j] = SBOX[*last4bytes++];
 8c8:	4f 2d       	mov	r20, r15
 8ca:	50 e0       	ldi	r21, 0x00	; 0
 8cc:	98 01       	movw	r18, r16
 8ce:	89 01       	movw	r16, r18
 8d0:	0f 5f       	subi	r16, 0xFF	; 255
 8d2:	1f 4f       	sbci	r17, 0xFF	; 255
 8d4:	f9 01       	movw	r30, r18
 8d6:	20 81       	ld	r18, Z
 8d8:	22 2f       	mov	r18, r18
 8da:	30 e0       	ldi	r19, 0x00	; 0
 8dc:	20 50       	subi	r18, 0x00	; 0
 8de:	3e 4f       	sbci	r19, 0xFE	; 254
 8e0:	d9 01       	movw	r26, r18
 8e2:	6c 91       	ld	r22, X
 8e4:	9e 01       	movw	r18, r28
 8e6:	2f 5f       	subi	r18, 0xFF	; 255
 8e8:	3f 4f       	sbci	r19, 0xFF	; 255
 8ea:	24 0f       	add	r18, r20
 8ec:	35 1f       	adc	r19, r21
 8ee:	f9 01       	movw	r30, r18
 8f0:	60 83       	st	Z, r22

    last4bytes = roundkeys-4;
    for (i = 0; i < AES_ROUNDS; ++i) {
        // k0-k3 for next round
        temp[3] = SBOX[*last4bytes++];
		for(j=0;j<3;j++)
 8f2:	2f 2d       	mov	r18, r15
 8f4:	ff 24       	eor	r15, r15
 8f6:	f3 94       	inc	r15
 8f8:	f2 0e       	add	r15, r18
 8fa:	f2 e0       	ldi	r31, 0x02	; 2
 8fc:	ff 15       	cp	r31, r15
 8fe:	20 f7       	brcc	.-56     	; 0x8c8 <aes_key_schedule_128+0x66>
		{
			temp[j] = SBOX[*last4bytes++];
		}
        j=0;
 900:	f1 2c       	mov	r15, r1
        temp[0] ^= RC[i];
 902:	49 81       	ldd	r20, Y+1	; 0x01
 904:	2e 2d       	mov	r18, r14
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	20 50       	subi	r18, 0x00	; 0
 90a:	3d 4f       	sbci	r19, 0xFD	; 253
 90c:	d9 01       	movw	r26, r18
 90e:	2c 91       	ld	r18, X
 910:	24 27       	eor	r18, r20
 912:	29 83       	std	Y+1, r18	; 0x01
        lastround = roundkeys-16;
 914:	6c 01       	movw	r12, r24
 916:	b0 e1       	ldi	r27, 0x10	; 16
 918:	cb 1a       	sub	r12, r27
 91a:	d1 08       	sbc	r13, r1
		while(j<4)
 91c:	1a c0       	rjmp	.+52     	; 0x952 <__stack+0x53>
		{*roundkeys++ = temp[j] ^ *lastround++;
 91e:	9c 01       	movw	r18, r24
 920:	c9 01       	movw	r24, r18
 922:	01 96       	adiw	r24, 0x01	; 1
 924:	4f 2d       	mov	r20, r15
 926:	50 e0       	ldi	r21, 0x00	; 0
 928:	be 01       	movw	r22, r28
 92a:	6f 5f       	subi	r22, 0xFF	; 255
 92c:	7f 4f       	sbci	r23, 0xFF	; 255
 92e:	46 0f       	add	r20, r22
 930:	57 1f       	adc	r21, r23
 932:	fa 01       	movw	r30, r20
 934:	60 81       	ld	r22, Z
 936:	a6 01       	movw	r20, r12
 938:	6a 01       	movw	r12, r20
 93a:	ff ef       	ldi	r31, 0xFF	; 255
 93c:	cf 1a       	sub	r12, r31
 93e:	df 0a       	sbc	r13, r31
 940:	da 01       	movw	r26, r20
 942:	4c 91       	ld	r20, X
 944:	46 27       	eor	r20, r22
 946:	f9 01       	movw	r30, r18
 948:	40 83       	st	Z, r20
			j++;
 94a:	2f 2d       	mov	r18, r15
 94c:	ff 24       	eor	r15, r15
 94e:	f3 94       	inc	r15
 950:	f2 0e       	add	r15, r18
			temp[j] = SBOX[*last4bytes++];
		}
        j=0;
        temp[0] ^= RC[i];
        lastround = roundkeys-16;
		while(j<4)
 952:	f3 e0       	ldi	r31, 0x03	; 3
 954:	ff 15       	cp	r31, r15
 956:	18 f7       	brcc	.-58     	; 0x91e <__stack+0x1f>
		{*roundkeys++ = temp[j] ^ *lastround++;
			j++;
		}
		
      for(j=0;j<12;j++)
 958:	f1 2c       	mov	r15, r1
 95a:	17 c0       	rjmp	.+46     	; 0x98a <__stack+0x8b>
	  {
		  *roundkeys++ = *last4bytes++ ^ *lastround++;
 95c:	9c 01       	movw	r18, r24
 95e:	c9 01       	movw	r24, r18
 960:	01 96       	adiw	r24, 0x01	; 1
 962:	a8 01       	movw	r20, r16
 964:	8a 01       	movw	r16, r20
 966:	0f 5f       	subi	r16, 0xFF	; 255
 968:	1f 4f       	sbci	r17, 0xFF	; 255
 96a:	da 01       	movw	r26, r20
 96c:	6c 91       	ld	r22, X
 96e:	a6 01       	movw	r20, r12
 970:	6a 01       	movw	r12, r20
 972:	bf ef       	ldi	r27, 0xFF	; 255
 974:	cb 1a       	sub	r12, r27
 976:	db 0a       	sbc	r13, r27
 978:	fa 01       	movw	r30, r20
 97a:	40 81       	ld	r20, Z
 97c:	46 27       	eor	r20, r22
 97e:	d9 01       	movw	r26, r18
 980:	4c 93       	st	X, r20
		while(j<4)
		{*roundkeys++ = temp[j] ^ *lastround++;
			j++;
		}
		
      for(j=0;j<12;j++)
 982:	2f 2d       	mov	r18, r15
 984:	ff 24       	eor	r15, r15
 986:	f3 94       	inc	r15
 988:	f2 0e       	add	r15, r18
 98a:	bb e0       	ldi	r27, 0x0B	; 11
 98c:	bf 15       	cp	r27, r15
 98e:	30 f7       	brcc	.-52     	; 0x95c <__stack+0x5d>
    for (i = 0; i < 16; ++i) {
        *roundkeys++ = *key++;
    }

    last4bytes = roundkeys-4;
    for (i = 0; i < AES_ROUNDS; ++i) {
 990:	e3 94       	inc	r14
 992:	e9 e0       	ldi	r30, 0x09	; 9
 994:	ee 15       	cp	r30, r14
 996:	08 f0       	brcs	.+2      	; 0x99a <__stack+0x9b>
 998:	88 cf       	rjmp	.-240    	; 0x8aa <aes_key_schedule_128+0x48>
		  *roundkeys++ = *last4bytes++ ^ *lastround++;
		  
	  }      

    }
}
 99a:	00 00       	nop
 99c:	0f 90       	pop	r0
 99e:	0f 90       	pop	r0
 9a0:	0f 90       	pop	r0
 9a2:	0f 90       	pop	r0
 9a4:	df 91       	pop	r29
 9a6:	cf 91       	pop	r28
 9a8:	1f 91       	pop	r17
 9aa:	0f 91       	pop	r16
 9ac:	ff 90       	pop	r15
 9ae:	ef 90       	pop	r14
 9b0:	df 90       	pop	r13
 9b2:	cf 90       	pop	r12
 9b4:	08 95       	ret

000009b6 <main>:
//#include <avr/io.h>

#include "Common.h"


int main(int argc, char *argv[]) {
 9b6:	cf 93       	push	r28
 9b8:	df 93       	push	r29
 9ba:	cd b7       	in	r28, 0x3d	; 61
 9bc:	de b7       	in	r29, 0x3e	; 62
 9be:	c4 5c       	subi	r28, 0xC4	; 196
 9c0:	d1 09       	sbc	r29, r1
 9c2:	0f b6       	in	r0, 0x3f	; 63
 9c4:	f8 94       	cli
 9c6:	de bf       	out	0x3e, r29	; 62
 9c8:	0f be       	out	0x3f, r0	; 63
 9ca:	cd bf       	out	0x3d, r28	; 61
 9cc:	9e 01       	movw	r18, r28
 9ce:	2f 53       	subi	r18, 0x3F	; 63
 9d0:	3f 4f       	sbci	r19, 0xFF	; 255
 9d2:	f9 01       	movw	r30, r18
 9d4:	91 83       	std	Z+1, r25	; 0x01
 9d6:	80 83       	st	Z, r24
 9d8:	ce 01       	movw	r24, r28
 9da:	8d 53       	subi	r24, 0x3D	; 61
 9dc:	9f 4f       	sbci	r25, 0xFF	; 255
 9de:	fc 01       	movw	r30, r24
 9e0:	71 83       	std	Z+1, r23	; 0x01
 9e2:	60 83       	st	Z, r22

	static uint8_t plaintext[] = {
		0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
		0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
	};
	mul(5);
 9e4:	85 e0       	ldi	r24, 0x05	; 5
 9e6:	0e 94 5e 00 	call	0xbc	; 0xbc <mul>
	uint8_t ciphertext[AES_BLOCK_SIZE];
	
	
	uint8_t roundkeys[AES_ROUND_KEY_SIZE];
	// key schedule
	aes_key_schedule_128(key, roundkeys);
 9ea:	ce 01       	movw	r24, r28
 9ec:	41 96       	adiw	r24, 0x11	; 17
 9ee:	bc 01       	movw	r22, r24
 9f0:	88 e0       	ldi	r24, 0x08	; 8
 9f2:	93 e0       	ldi	r25, 0x03	; 3
 9f4:	0e 94 31 04 	call	0x862	; 0x862 <aes_key_schedule_128>
	// encryption
	aes_encrypt_128(roundkeys, plaintext, ciphertext);
 9f8:	ce 01       	movw	r24, r28
 9fa:	41 96       	adiw	r24, 0x11	; 17
 9fc:	9e 01       	movw	r18, r28
 9fe:	2f 5f       	subi	r18, 0xFF	; 255
 a00:	3f 4f       	sbci	r19, 0xFF	; 255
 a02:	a9 01       	movw	r20, r18
 a04:	68 e1       	ldi	r22, 0x18	; 24
 a06:	73 e0       	ldi	r23, 0x03	; 3
 a08:	0e 94 da 02 	call	0x5b4	; 0x5b4 <aes_encrypt_128>

	// decryption
	aes_decrypt_128(roundkeys, ciphertext,ciphertext);
 a0c:	ce 01       	movw	r24, r28
 a0e:	41 96       	adiw	r24, 0x11	; 17
 a10:	9e 01       	movw	r18, r28
 a12:	2f 5f       	subi	r18, 0xFF	; 255
 a14:	3f 4f       	sbci	r19, 0xFF	; 255
 a16:	a9 01       	movw	r20, r18
 a18:	9e 01       	movw	r18, r28
 a1a:	2f 5f       	subi	r18, 0xFF	; 255
 a1c:	3f 4f       	sbci	r19, 0xFF	; 255
 a1e:	b9 01       	movw	r22, r18
 a20:	0e 94 c4 00 	call	0x188	; 0x188 <aes_decrypt_128>

	return 0;
 a24:	80 e0       	ldi	r24, 0x00	; 0
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	cc 53       	subi	r28, 0x3C	; 60
 a2a:	df 4f       	sbci	r29, 0xFF	; 255
 a2c:	0f b6       	in	r0, 0x3f	; 63
 a2e:	f8 94       	cli
 a30:	de bf       	out	0x3e, r29	; 62
 a32:	0f be       	out	0x3f, r0	; 63
 a34:	cd bf       	out	0x3d, r28	; 61
 a36:	df 91       	pop	r29
 a38:	cf 91       	pop	r28
 a3a:	08 95       	ret

00000a3c <_exit>:
 a3c:	f8 94       	cli

00000a3e <__stop_program>:
 a3e:	ff cf       	rjmp	.-2      	; 0xa3e <__stop_program>
